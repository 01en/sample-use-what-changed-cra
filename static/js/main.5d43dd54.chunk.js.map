{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","a","setA","useState","b","setB","____useWhatChanged","useEffect","useMemo","useCallback","console","log","className","onClick","c","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAsDeA,MA/CH,KACV,MAAOC,EAAGC,GAAQC,mBAAS,IACpBC,EAAGC,GAAQF,mBAAS,GARtBG,EAAmB,CAACL,EAAGG,GAAG,OAAQ,0BAWvCG,qBAAU,QAEP,CAACN,EAAGG,IAIGI,mBAAQ,IACTP,EAAI,GACV,CAACA,IAIaQ,uBAAY,KAC3BC,QAAQC,IAAIP,GACL,kBACN,CAACA,IAEJ,OACE,wBAAKQ,UAAU,MAAf,UACE,uIACA,2BACEC,QAAS,KACPX,GAAKY,GAAKA,EAAI,KAFlB,iFAOA,2BACED,QAAS,KACPR,GAAKS,GAAKA,EAAI,KAFlB,iFAOA,uGACA,iCAAMb,QAAN,uDACA,uGACA,iCAAMG,QAAN,8DAnBF,wDChBWW,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,EAAGC,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4FCHdQ,IAASC,OACP,iBAAC,IAAMC,WAAP,UACE,iBAAC,EAAD,oEADF,sDAGAC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5d43dd54.chunk.js","sourcesContent":["import { useEffect, useState, useMemo, useCallback } from \"react\";\n\n/**\n * Uncomment the hooks below uwc-debug comment to see the the output\n * in console, this hooks works for useEffect, useCallback, useMemo which almost cover most of the the\n * hooks that we use on a daily basis\n */\nconst App = () => {\n  const [a, setA] = useState(0);\n  const [b, setB] = useState(0);\n\n  //uwc-debug\n  useEffect(() => {\n    // do something\n  }, [a, b]);\n\n  // uwc-debug\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const v = useMemo(() => {\n    return a + 1;\n  }, [a]);\n\n  // uwc-debug\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const callback = useCallback(() => {\n    console.log(b);\n    return \"some callback\";\n  }, [b]);\n\n  return (\n    <div className=\"App\">\n      <h2>Start editing to see some magic happen!</h2>\n      <button\n        onClick={() => {\n          setA(c => c + 1);\n        }}\n      >\n        Change A\n      </button>\n      <button\n        onClick={() => {\n          setB(c => c + 1);\n        }}\n      >\n        Change B\n      </button>\n      <h2>value:a</h2>\n      <div>{a}</div>\n      <h2>value:b</h2>\n      <div>{b}</div>\n    </div>\n  );\n};\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}